// [[]]* : zero or more :D 



// ########--------------LEXICAL RULES-------------------########

<Letter>                    ::= <Capital_letter> | <Small_letter>
<Capital_letter>            ::= A | B | ... | Z
<Small_letter>              ::= a | b | ... | z
<Digit>                     ::= 0 | 1 | ... | 9
<ID>                        ::= <Small_letter> [[ <Letter> | Digit | _ ]]*
<TYPE>                      ::= <Capital_letter> [[ <Letter> | Digit | _ ]]*
<INTEGER>					::=	[[<Digit>]]+
<STRING>					::=	[[<ASCII>]]+

// ########--------------SYNTAX RULES--------------------########

<Compilation_unit>          ::= [<Package_declaration>] [<Import_declarations>] [<Program>]

<Package_declaration>       ::= package <Package_name> ;

<Package_name>              ::= <Package_name>.<ID>
                            |   <ID>

<Import_declarations>       ::= <Import_declarations> <Import_declaration>
                            |   <Import_declaration>

<Import_declaration>        ::= import <Package_name>;
                            |   import <Package_name>.*;

<Program>                   ::= [[ <Class>; | <Interface>; ]]*					/*Zero or more Classes*/

<Class>                     ::= class <TYPE> <Inheritance> <Implement_Interface> { <Features_list_opt> }

<Interface>                 ::= interface <TYPE> <Interface_Inheritance_List> { <Features_list_opt> }

<Interface_Inheritance_List>::= inherits <TYPE> |
							|	<Interface_Inheritance_List>, <TYPE>
							| 	<Empty>

<Inheritance>               ::= inherits <TYPE>
                            |   <Empty>

<Implement_Interface>		::= implements <Interfaces_list>
							|	<Empty>

<Interfaces_list>			::= <Interfaces_list>, <TYPE>
							|	<TYPE>

<Features_list_opt>         ::= <Features_list>
                            |   <Empty>

<Features_list>             ::= <Features_list> <Feature> ;
                            |   <Feature> ;

<Feature>                   ::= <ID> ( <Formal_params_list_opt> ) : <TYPE> { <Expression> }
                            |   <Formal>

<Formal_params_list_opt>    ::= <Formal_params_list>
                            |   <Empty>

<Formal_params_list>        ::= <Formal_params_list> , <Formal_param>
                            |   <Formal_param>

<Formal_param>              ::= <ID> : <TYPE>

<Formal>                    ::= <ID> : <TYPE> <- <Expression>
                            |   <ID> : <TYPE>

<Expression>                ::= <ID> <- <Expression>
                            |   <Expression>.<ID>( <Arguments_list_opt> )
                            |   <Expression>@<TYPE>.<ID>( <Arguments_list_opt> )
                            |   <Conditionals>
                            |   <Loops>
                            |   <Block_Expression>
                            |   <Let_Expression>
                            |   <Return_Expression>
                            |   new <TYPE>
                            |   isvoid <Expression>
                            |   <Break_statement>
                            |   <Continue_statement>
                            |   <Expression> + <Expression>
                            |   <Expression> - <Expression>
                            |   <Expression> * <Expression>
                            |   <Expression> / <Expression>
                            |   ~ <Expression>
                            |   <Expression> < <Expression>
                            |   <Expression> <= <Expression>
                            |   <Expression> = <Expression>
                            |   <Expression> > <Expression>
                            |   <Expression> >= <Expression>
                            |   <Expression> && <Expression>
                            |   <Expression> || <Expression>
                            |   <Expression> & <Expression>
                            |   <Expression> | <Expression>
                            |   <Expression> ^ <Expression>
                            |   not <Expression>
                            |   ( <Expression> )
                            |   SELF
                            |   <ID>
                            |   true
                            |   false
                            |	SELF_TYPE
                            |   <INTEGER>
                            |   <STRING>
<Conditionals>				::= <Case>
                            |   <If_then_else>
<Loops>						::= <While>
                            |   <For>
                            |	<Do_while>
<Arguments_list_opt>        ::= <Arguments_list>
                            |   <Empty>

<Arguments_list>            ::= <Arguments_list> , <Expression>
                            |   <Expression>

<Case>                      ::= case <Expression> of <Actions> esac

<Actions>                   ::= <Action>
                            |   <Action> <Actions>

<Action>                    ::= <ID> : <TYPE> => <Expression>

<If_then_else>              ::= if <Expression> then <Expression> else <Expression> fi

<While>                     ::= while <Expression> loop <Expression> pool

<For>                       ::= for (<Expression> ; <Expression> ; <Expression>) loop <Expression> pool

<Do_while>					::= do loop <Expression> pool while <Expression>

<Break_statement>           ::= break

<Continue_statement>        ::= continue 

<Block_Expression>          ::= { <Block_list> }

<Block_list>                ::= <Block_list> <Expression> ;
                            |   <Expression> ;

<Let_Expression>            ::= let <Formal>[[,<Formal>]]* in <Expression>

<Return_Expression>         ::= return [<Expression>]

<Empty>                     ::=