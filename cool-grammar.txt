														// Glossary
// <!------------------------------------------------------------------------------------------------------------------------------------->
[]: Optional 		[[x]]+: One or more x's 		[[x]]*: Zero or more x's 	
// <!------------------------------------------------------------------------------------------------------------------------------------->
<Program> 					::=  	[[<Package_statements>]]+ [[<Import_statements>]]+ [[<Type_statements>]]+

/*BEGIN PACKAGE STATEMENTS----------------------------------------------------------------------------------------------------------------------*/
<Package_statements>		::= package <PACKAGE_NAME>;
/*END PACKAGE STATEMENTS----------------------------------------------------------------------------------------------------------------------*/
/*BEGIN IMPORT STATEMENTS----------------------------------------------------------------------------------------------------------------------*/
<Import_statements>			::= <Import_declaration> 
							|	<Import_statements> <Import_declaration>
<Import_declaration>		::= import <IMPORT_TYPE_NAME>;
							| 	import <PACKAGE_NAME>.*;
/*END IMPORT STATEMENTS----------------------------------------------------------------------------------------------------------------------*/
/*BEGIN TYPE DECLARATIONS---------------------------------------------------------------------------------------------------------------------*/
<Type_statements>			::= <Class_statements>
							|	<Interface_statements>
<Class_statements>			::=	<Class_header> <Class_body>  				/*<Class keyword is used for class-inside-class>*/
<Class_header>				::= [static] [abstract] class <CLASS_TYPE> [inherits <CLASS_TYPE> ] [implements <Interface_list>]
<Class_body>				::= { [[<Class_body_declarations>]]+ }							/*Blank class body are not allowed*/
<Class_body_declarations>	::= <Method_declaration>
							|	<Field_declaration>
							|	<Constructor_declaration>
<Method_declaration>		::=	<Method_head> <Method_body>
<Method_head>				::=	 
<Method_body>				::=
<Field_declaration>			::=	
<Constructor_declaration>	::= <Constructor_head> <Constructor_body>
<Constructor_head>			::= [static] <CONSTRUCTOR_NAME> : <CLASS_TYPE>(<Arguements>)
<Constructor_body>			::=	<Block>
<Interface_list> 			::=	
/*END   TYPE DECLARATIONS---------------------------------------------------------------------------------------------------------------------*/





